<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[使用Linux虚拟机搭建透明代理]]></title>
      <url>%2F2018%2F05%2F30%2Fbuild-tproxy%2F</url>
      <content type="text"><![CDATA[准备工作 准备vps，推荐搬瓦工,现在已经有CN2优化的线路了 , 购买非常方便，不需要信用卡，可以用支付宝直接购买 目前支持CN2的VPS都是基于KVM的，安装操作系统的适合主要选择支持bbr的64位系统， BBR是 Google 出的加速协议，直接在内核运行 服务器设置 服务器安装好之后，需要安装shadowsocks,搬瓦工已经内置了一键安装 SS的功能，在控制界面可以直接选择一键安装 Shadowsocks,但是个别的操作系统没有这个选项，需要用到下面的方法 去shadowsocks的 github 看 Readme安装]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[post]]></title>
      <url>%2F2018%2F05%2F30%2Fpost%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[testImage]]></title>
      <url>%2F2017%2F04%2F26%2FtestImage%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SpringBoots单Jar部署导致的请求缓慢的问题]]></title>
      <url>%2F2017%2F04%2F26%2FSpringBoots%E2%95%A1%D0%B5Jar%E2%96%93%E2%94%90%E2%95%A9%D0%81%E2%95%A1%E2%95%9D%E2%95%93%E2%94%AC%E2%95%A1%E2%94%80%E2%95%9F%D1%8B%E2%95%9F%D1%94%E2%95%97%E2%95%91%E2%94%AC%C2%A4%E2%95%A1%E2%94%80%E2%95%AC%E2%95%A9%E2%95%A0%D1%82%2F</url>
      <content type="text"><![CDATA[使用单Jar部署SpringBoots, 方便,无其他依赖,在构建Jar的时候,会把所有的依赖都打包进Jar包中, 初看没什么问题.但是如果使用tomcat作为内嵌container,会出现规律性的请求变慢的问题, 经过Jvisualvm分析, 发现tomcat中有一个方法 getArchiveEntries 运行了1.6秒之多 有一个后台线程会周期性的调用webResourceSet的gc方法,把getArchiveEntries中的初始化的资源回收掉已经加载进内存的JarWarResourceSet回收.但是在下一次请求的时候,又会重新加载这些资源,慢的速度取决于依赖的多少. SpringBoots的Application.property中有一个配置项可以调整回收线程的运行频率: 1server.tomcat.background-processor-delay=30 #默认是30秒执行一次, -1是不启动回收线程 调整后这个请求响应时间下降了1.6秒.问题解决 ……]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[授权和验证的区别]]></title>
      <url>%2F2017%2F03%2F30%2Fdifferences-bw-authentication-authorization%2F</url>
      <content type="text"><![CDATA[Authentication(验证)验证检查 你是谁? Authorization(授权)授权检查 你被授予能做什么的权利]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PostgreSql笔记]]></title>
      <url>%2F2017%2F03%2F30%2FPostgresql%E2%96%92%E2%95%A9%E2%95%9D%E2%95%9F%2F</url>
      <content type="text"><![CDATA[PostgreSql 笔记获取不带毫秒的时间 1234create table t1 (ts timestamp);insert into t1 values(now());select ts::timestamp(0) from t1;select cast (ts as timestamp(0)) from t1; https://www.postgresql.org/message-id/1136477796.21986.27.camel@state.g2switchworks.com https://www.postgresql.org/docs/9.1/static/datatype-datetime.html 简单来说， timstamp(p), 这个p代表的是时间的精度，范围从 0-6. 下表对此做了详细的说明, 部署测试1111 Name Storage Size Description Low Value High Value Resolution timestamp [ (p) ] [ without time zone ] 8 bytes both date and time (no time zone) 4713 BC 294276 AD 1 microsecond / 14 digits timestamp [ (p) ] with time zone 8 bytes both date and time, with time zone 4713 BC 294276 AD 1 microsecond / 14 digits date 4 bytes date (no time of day) 4713 BC 5874897 AD 1 day time [ (p) ] [ without time zone ] 8 bytes time of day (no date) 00:00:00 24:00:00 1 microsecond / 14 digits time [ (p) ] with time zone 12 bytes times of day only, with time zone 00:00:00+1459 24:00:00-1459 1 microsecond / 14 digits interval [ fields ] [ (p) ] 16 bytes time interval -178000000 years 178000000 years 1 microsecond / 14 digits]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[oauth2]]></title>
      <url>%2F2017%2F03%2F29%2Foauth2%2F</url>
      <content type="text"><![CDATA[术语 client: also known as application, for example Twitter for iPhone is a client resource owner: it is usually the user of a website access token: this is the key for a client to get resource from a resource owner]]></content>
    </entry>

    
  
  
</search>
