<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[PostgreSql笔记]]></title>
      <url>%2F2017%2F03%2F30%2FPostgresql%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[PostgreSql 笔记获取不带毫秒的时间 1234create table t1 (ts timestamp);insert into t1 values(now());select ts::timestamp(0) from t1;select cast (ts as timestamp(0)) from t1; https://www.postgresql.org/message-id/1136477796.21986.27.camel@state.g2switchworks.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[oauth2]]></title>
      <url>%2F2017%2F03%2F29%2Foauth2%2F</url>
      <content type="text"><![CDATA[[toc] 理解OAuth 2.0OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为RFC 6749。 一、应用场景为了理解OAuth的适用场合，让我举一个假设的例子。有一个”云冲印”的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让”云冲印”读取自己储存在Google上的照片。问题是只有得到用户的授权，Google才会同意”云冲印”读取这些照片。那么，”云冲印”怎样获得用户的授权呢？传统方法是，用户将自己的Google用户名和密码，告诉”云冲印”，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。 （1）”云冲印”为了后续的服务，会保存用户的密码，这样很不安全。（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。（3）”云冲印”拥有了获取用户储存在Google所有资料的权力，用户没法限制”云冲印”获得授权的范围和有效期。（4）用户只有修改密码，才能收回赋予”云冲印”的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。 OAuth就是为了解决上面这些问题而诞生的。 sessionID 不能自动失效！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>%2F2017%2F03%2F29%2Fabout%2F</url>
      <content type="text"><![CDATA[是一个写Java的程序员, 123456public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125; &#125; 1print("Hello World!"); 1234567#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main() &#123; println("Hello World!"); exit(0);&#125; 1Console.log("Hello World!"); 解决了一个大bugend!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[深入了解JVM虚拟机]]></title>
      <url>%2F2017%2F03%2F28%2F%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
      <content type="text"><![CDATA[123456789101112import java.utils.List；public class DeepLearningJVM &#123; public static void main(String[] args &#123;&#125;) &#123; System.out.println("JVM"); List&lt;String&gt; list = Arrays.asList("1","2","3"); list.foreach((v)-&gt;&#123; System.out.println(String.format("====%s", v)); &#125;); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F28%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
